// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id             String         @id @default(cuid())
  name           String
  description    String
  limitMembers   Int
  limitModelUses Int
  price          Float
  durationInDays Int
  subscriptions  Subscription[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  hostUser  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members        OrganizationMember[]
  patients       Patient[]
  consultations  Consultation[]
  appointments   MedicalAppointment[]
  diagnoses      Diagnosis[]
  treatments     Treatment[]
  subscriptions  Subscription[]
  attentionHours AttentionHour[]
}

model Subscription {
  id             String       @id @default(cuid())
  organizationId String
  planId         String
  plan           Plan         @relation(fields: [planId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  startDate      DateTime
  endDate        DateTime
  modelUsesCount Int          @default(0)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  memberships        OrganizationMember[]
  consultations      Consultation[]
  attentionHourUsers AttentionHourUser[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String
  organizationId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Patient {
  id             String               @id @default(cuid())
  name           String
  aPaternal      String?
  aMaternal      String?
  sexo           String
  birthDate      DateTime
  phone          Int
  email          String
  ci             Int                  @unique
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  consultations  Consultation[]
  appointments   MedicalAppointment[]

  @@unique([organizationId, ci])
}

model AttentionHour {
  id                 String              @id @default(cuid())
  days               String[]
  startTime          DateTime
  endTime            DateTime
  organizationId     String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  attentionHourUsers AttentionHourUser[]
}

model AttentionHourUser {
  userId          String
  attentionHourId String
  user            User          @relation(fields: [userId], references: [id])
  attentionHour   AttentionHour @relation(fields: [attentionHourId], references: [id], onDelete: Cascade)

  @@id([userId, attentionHourId])
}

model MedicalAppointment {
  id             String       @id @default(cuid())
  date           String
  startTime      DateTime
  endTime        DateTime
  patientId      String
  organizationId String
  patient        Patient      @relation(fields: [patientId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Diagnosis {
  id             String                  @id @default(cuid())
  name           String
  description    String
  creationDate   DateTime                @default(now())
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  consultations  ConsultationDiagnosis[]
}

model Treatment {
  id             String                  @id @default(cuid())
  description    String
  duration       String
  instructions   String
  frequencyValue Int?
  frequencyUnit  FrequencyUnit?
  organizationId String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  consultations  ConsultationTreatment[]
}

enum FrequencyUnit {
  daily
  weekly
  monthly
}

model Consultation {
  id               String                  @id @default(cuid())
  motivo           String
  observaciones    String?
  consultationDate DateTime                @default(now())
  organizationId   String
  patientId        String
  userId           String
  organization     Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient          Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user             User                    @relation(fields: [userId], references: [id])
  diagnoses        ConsultationDiagnosis[]
  treatments       ConsultationTreatment[]
}

model ConsultationDiagnosis {
  consultationId String
  diagnosisId    String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  diagnosis      Diagnosis    @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)

  @@id([consultationId, diagnosisId])
}

model ConsultationTreatment {
  consultationId String
  treatmentId    String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  treatment      Treatment    @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@id([consultationId, treatmentId])
}

enum AuthProvider {
  email
  google
  github
}
